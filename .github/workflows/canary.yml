name: Canary
on:
  pull_request:
    branches:
      - 'master'
  merge_group:
    types: [checks_requested]

env:
  GH_TOKEN: ${{ secrets.ARI_ADMIN_PAT_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  NPM_CONFIG_PROVENANCE: true

jobs:
  build:
    runs-on: ubuntu-22.04
    name: Build
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn -v
          yarn install --immutable

      - name: Build
        run: yarn build

      - name: Upload Build Results
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            packages/@magic-ext/*/dist
            packages/@magic-sdk/*/dist
            packages/*/dist
          overwrite: true

  create_canary:
    runs-on: ubuntu-22.04
    name: Canary
    permissions:
      contents: read
      id-token: write
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn -v
          yarn install --immutable

      - name: Download Build Results
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: packages

      - name: Create Canary Release
        run: |
          # Create a wrapper script in /tmp to avoid auto-it's clean directory check
          cat > /tmp/auto-canary-wrapper.js << 'EOF'
          const { spawn } = require('child_process');
          const fs = require('fs');
          const path = require('path');

          // Change to the project directory
          process.chdir(process.env.GITHUB_WORKSPACE || '/home/runner/work/magic-js/magic-js');

          // Start auto canary process
          const autoProcess = spawn('yarn', ['auto', 'canary', '-v'], {
            stdio: ['inherit', 'pipe', 'pipe'],
            env: process.env,
            cwd: process.cwd()
          });

          let hasRebuilt = false;
          let versionUpdated = false;

          // Monitor stdout for version updates
          autoProcess.stdout.on('data', (data) => {
            const output = data.toString();
            process.stdout.write(data);
            
            // Look for signs that auto-it has updated package.json versions
            if ((output.includes('Calculated canary version') || 
                 output.includes('Publishing') || 
                 output.includes('Published canary version')) && !hasRebuilt) {
              
              // Check if version actually got updated
              try {
                // Clear require cache to get fresh version
                const pkgPath = path.resolve('./packages/magic-sdk/package.json');
                delete require.cache[pkgPath];
                const pkg = require(pkgPath);
                
                if (pkg.version.includes('canary') && !versionUpdated) {
                  versionUpdated = true;
                  console.log('\nðŸ”„ Version updated to canary, rebuilding...');
                  
                  // Rebuild synchronously
                  const { execSync } = require('child_process');
                  execSync('yarn build', { stdio: 'inherit' });
                  hasRebuilt = true;
                  console.log('âœ… Rebuild complete, continuing with publish...\n');
                }
              } catch (e) {
                // Package.json might not be updated yet, continue monitoring
              }
            }
          });

          autoProcess.stderr.on('data', (data) => {
            process.stderr.write(data);
          });

          autoProcess.on('close', (code) => {
            // Cleanup the temp file
            try {
              fs.unlinkSync('/tmp/auto-canary-wrapper.js');
            } catch (e) {
              // Ignore cleanup errors
            }
            process.exit(code);
          });
          EOF

          # Run the wrapper script from /tmp
          node /tmp/auto-canary-wrapper.js
